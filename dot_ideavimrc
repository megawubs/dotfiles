""" Map leader to space ---------------------

let mapleader = " "
""" Plugins  --------------------------------
""" set number
" Do incremental searching.
set incsearch
set ignorecase
set smartcase
set hlsearch
""" Needed for which-key pluginset which-key
set which-key
" disable the timeout option
set notimeout

" highlight yanked text
set highlightedyank

set surround
" set sneak
" set quickscope
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T', 's']
" provides a text-object for 'gc' commenting
set commentary
" provides a text-object 'a' (argument)
set argtextobj
" provides a text-object e (entire buffer)
set textobj-entire " provides a text-object for i (indentation level)
set textobj-indent
set ReplaceWithRegister
set nerdtree
""" plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"
""" common settings -------------------------
set showmode
set so=5
set incsearch
set nu
set clipboard+=unnamed
""" idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
set multiple-cursors

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
let g:WhichKeyDesc_multi_cursor = "m Multiple Cursors"
map mc <Plug>NextWholeOccurrence
let g:WhichKeyDesc_multi_cursor_next_normal = "mc Next Word"
xmap mc <Plug>NextWholeOccurrence

nmap mn <Plug>NextOccurrence
let g:WhichKeyDesc_multi_cursor_next_normal = "mc Next"
xmap mn <Plug>NextOccurrence

xmap ms <Plug>SkipOccurrence
let g:WhichKeyDesc_multi_cursor_skip = "ms Skip Next"
xmap mr <Plug>RemoveOccurrence
let g:WhichKeyDesc_multi_cursor_remove = "mr Remove"
nmap ma <Plug>AllWholeOccurrences
let g:WhichKeyDesc_multi_cursor_all_words_normal = "ma All Words"
xmap ma <Plug>AllWholeOccurrences
nmap mA <Plug>AllOccurrences
let g:WhichKeyDesc_multi_cursor_all = "mA All"
xmap mA <Plug>AllOccurrences


" Easy visual indentation
vnoremap < <gv vnoremap > >gv
" Popup navigation
map <c-j> <Action>(PopupMenu-selectnext)
map <c-k> <Action>(PopupMenu-selectprev)
" Tab navigation
" nnoremap <A-n> gt
" nnoremap <A-p> gT
""" matchit.vim set matchit
" show a few lines of conteXt around the cursor. note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
let g:WhichKey_ShowVimActions = "true"

" edit ideavim config
nnoremap \e :e ~/.ideavimrc<CR>
let g:WhichKeyDesc_edit_config = "\\e Edit Config"
map \r <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_edit_config = "\\r Reload"
map <buffer>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_go_to_declaration = "gd Go to Declaration"
map <buffer>gy <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_go_to_type_declaration = "gy Go to Type Declaration"
nmap <buffer> ge <Action>(EditorCodeBlockEnd)
let g:WhichKeyDesc_go_to_code_block_end = "ge Go to Block End"
nmap <buffer> gI <Action>(GotoImplementation)
let g:WhichKeyDesc_go_to_implementation = "gI Go to Implementation"
nmap <buffer> gn <Action>(MethodDown)
let g:WhichKeyDesc_go_to_next_method = "gn Next Method"
nmap <buffer> gp <Action>(MethodUp)
map <buffer> gs <Action>(GotoSuperMethod)
map zc <Action>(CollapseRegion)
map zo <Action>(ExpandRegion)

""" window splitting & navigation
map <c-o> <Action>(Back)
map <c-i> <Action>(Forward)
map <c-\> <Action>(SplitVertically)
map <c--> <Action>(SplitHorizontally)
map <c-=> <Action>(Unsplit)
map <c-m> <Action>(MoveEditorToOppositeTabGroup)

" sethandler <c-j> a:vim
" sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
map L <Action>(QuickImplementations)

""" abcdefghijklmnopqrstvwxyz
Action map <leader>a <Action>(ShowIntentionActionsk
let g:WhichKeyDesc_actions = "<leader>a Show Intentions"

""" Bookmarks
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
map <leader>bb <Action>(ToggleBookmark)
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
map <leader>be <Action>(EditBookmark)
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
map <leader>bt <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
map <leader>bm <Action>(Bookmarks)
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
map <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
map <leader>bp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
map <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"


""" Casing
""" Requires https://plugins.jetbrains.com/plugin/10985-case-conversion
let g:WhichKeyDesc_change_camel_case = "ga Casing"
vmap gam <Action>(me.laria.code.idea_caseconv.convert_case_menu)
let g:WhichKeyDesc_change_case_menu = "gam Menu"
vmap gac <Action>(me.laria.code.idea_caseconv.CamelCaseAction)
let g:WhichKeyDesc_change_camel_case = "gac toCamelCase"
vmap gad <Action>(me.laria.code.idea_caseconv.DashCaseAction)
let g:WhichKeyDesc_change_dash_case = "gad to-dash-case"
vmap gal <Action>(me.laria.code.idea_caseconv.LowerCaseAction)
let g:WhichKeyDesc_change_lower_case = "gal Convert to lower case"
vmap gan <Action>(me.laria.code.idea_caseconv.screaming_snake_case_action)
let g:WhichKeyDesc_change_screaming_snake_case = "gan TO_SCREAMING_SNAKE_CASE"
vmap gap <Action>(me.laria.code.idea_caseconv.PascalCaseAction)
let g:WhichKeyDesc_change_pascal_case = "gap ToPascalCase"
vmap gas <Action>(me.laria.code.idea_caseconv.SnakeCaseAction)
let g:WhichKeyDesc_change_snake_case = "gas to_snake_case"
vmap gau <Action>(me.laria.code.idea_caseconv.UpperCaseAction)
let g:WhichKeyDesc_change_upper_case = "gau TO_UPPER_CASE"
vmap gaw <Action>(me.laria.code.idea_caseconv.SeparateWordsAction)
let g:WhichKeyDesc_separate_words = "gaw separate words"
vmap gat <Action>(me.laria.code.idea_caseconv.TitleCaseAction)
let g:WhichKeyDesc_title_case = "gat Title Case"
vmap ga. <Action>(me.laria.code.idea_caseconv.DotCaseAction)
let g:WhichKeyDesc_dot_case = "ga. dot.case"
vmap gaS <Action>(me.laria.code.idea_caseconv.SentenceCaseAction)
let g:WhichKeyDesc_sentence_case = "gaS Sentence case"

""" Debugging
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
map <leader>dd <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debugging_toggle_breakpoint = "<leader>dd Toggle Break Point"
map <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging_tool = "<leader>dt Tool"
map <leader>de <Action>(EditBreakpoint)
let g:WhichKeyDesc_debugging_edit_breakpoint = "<leader>de Edit Breakpoint"
map <leader>ds <Action>(PhpListenDebugAction)
let g:WhichKeyDesc_debugging_listen = "<leader>ds Start Listening"
map <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debugging_step_over = "<leader>do Step Over"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debugging_step_into = "<leader>di Step Into"
map <leader>dr <Action>(EvaluateExpression)
let g:WhichKeyDesc_debugging_repl = "<leader>dr Repl (Evaluate)"
map <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_debugging_run_to_cursor = "<leader>dC Run To Cursor"
map <leader>dc <Action>(Resume)
let g:WhichKeyDesc_debugging_resume = "<leader>dc Resume"
map <leader>dm <Action>(XDebugger.MuteBreakpoints)
let g:WhichKeyDesc_debugging_mute = "<leader>dm Mute"
" map <leader>dc <Action>(ChooseDebugConfiguration)
" let g:WhichKeyDesc_debugging_resume = "<leader>dc Debug Configuration"

let g:WhichKeyDesc_mering = "<leader>gd Diff & Merge"
map <leader>gdn <Action>(NextDiff)
let g:WhichKeyDesc_diff_merge_next_diff = "<leader>gdn Next Diff"
map <leader>gdp <Action>(PreviousDiff)
let g:WhichKeyDesc_diff_merge_previous_diff = "<leader>gdp Previous Diff"
map <leader>gds <Action>(Diff.ShowDiff)
let g:WhichKeyDesc_diff_merge_show_diff = "<leader>gds Show Diff"
map <leader>gde <Action>(Vcs.Diff.ExcludeChangedLinesFromCommit)
let g:WhichKeyDesc_diff_merge_exclude_lines = "<leader>gde Exclude Changes"
map <leader>gdi <Action>(Vcs.Diff.IncludeChangedLinesIntoCommit)
let g:WhichKeyDesc_diff_merge_include_changes = "<leader>gdi Include Changes"
map <leader>gds <Action>(Vcs.EditSource)
let g:WhichKeyDesc_diff_merge_show_diff = "<leader>gds Edit Source"
map <leader>gdah <Action>(Diff.ApplyLeftSide)
let g:WhichKeyDesc_diff_merge_apply_left = "<leader>gdah Apply Left"
map <leader>gdal <Action>(Diff.ApplyRightSide)
let g:WhichKeyDesc_diff_merge_apply_right = "<leader>gdal Apply Right"
map <leader>gdih <Action>(Diff.IgnoreLeftSide)
let g:WhichKeyDesc_diff_merge_ignore_left = "<leader>gdih Ignore Left"
map <leader>gdil <Action>(Diff.IgnoreRightSide)
let g:WhichKeyDesc_diff_merge_ignore_right = "<leader>gdil Ignore Left"
map <leader>gdr <Action>(Git.ResolveConflicts)
map <leader>gdg <Action>(Diff.EditorGutterPopupMenu)
map <leader>gdm <Action>(Vcs.Operations.Popup)
map <leader>gdM <Action>(Diff.MagicResolveConflicts)
let g:WhichKeyDesc_diff_merge_resolve_conflicts = "<leader>gdM Resolve Conflicts"


""" Git
let g:WhichKeyDesc_git = "<leader>g Git"
map <leader>gg <Action>(CheckinProject)
let g:WhichKeyDesc_git_checkin = "<leader>gg Checkin"
map <leader>gb <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>gb Branches"
map <leader>gp <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_git_commit_and_push = "<leader>gp Commit & Push"
map <leader>gP <Action>(Vcs.Push)
let g:WhichKeyDesc_git_push = "<leader>gP Push"
map <leader>gm <Action>(VcsGroups)
let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
map <leader>gf <Action>(Git.Fetch)
let g:WhichKeyDesc_git_fetch = "<leader>gf Fetch"
map <leader>ga <Action>(Annotate)
let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
map <leader>gl <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_log = "<leader>gl Log"
map <leader>gt <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_tool = "<leader>gt Tool"
map <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>gr Rollback"
map <leader>go <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_git_open_pull_requests = "<leader>go Open Pull Requests"
map <leader>gc <Action>(Vcs.Show.Local.Changes)
let g:WhichKeyDesc_git_local_changes = "<leader>gc Show Local Changes"

" Git Settings
let g:WhichKeyDesc_git_settings = "<leader>gs Settings"
map <leader>gsa <Action>(Vcs.ToggleAmendCommitMode)
let g:WhichKeyDesc_git_settings_amend = "<leader>gsa Toggle Ammend"
" Git File
let g:WhichKeyDesc_git_file= "<leader>gf File"
map <leader>gfh <Action>(Vcs.ShowTabbedFileHistory)
vmap <leader>gfh <Action>(Vcs.ShowHistoryForBlock)

"GitHub
let g:WhichKeyDesc_git_hub = "<leader>gh GitHub"
map <leader>ghp <Action>(Github.Create.Pull.Request)
let g:WhichKeyDesc_git_hub_create_pull_request = "<leader>ghp Create Pull Request"
map <leader>ghm <Action>(GitHub.MainMenu)
let g:WhichKeyDesc_git_hub_main_menu = "<leader>ghm Main Menu"
map <leader>ghb <Action>(Github.Pull.Request.Branch.Popup.Actions)
let g:WhichKeyDesc_git_hub_pull_request_branch_actions = "<leader>ghb Pull Request Branch Actions"
map <leader>ghu <Action>(Github.Pull.Request.Branch.Update)
let g:WhichKeyDesc_git_hub_pull_request_branch_update = "<leader>ghu Pull Request Branch Update"
map <leader>ghe <Action>(Github.Pull.Request.Review.In.Editor.Toggle)
let g:WhichKeyDesc_git_hub_pull_request_review_mode_toggle = "<leader>ghe Toggle Review Mode"
map<leader>ghc <Action>(Github.PullRequest.Diff.Comment.Create)
let g:WhichKeyDesc_git_hub_pull_request_diff_comment_create = "<leader>ghc Create Comment"
map <leader>ghv <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_git_hub_pull_request_view = "<leader>ghv View Pull Request"
map <leader>ghs <Action>(Github.PullRequest.Review.Submit )
let g:WhichKeyDesc_git_hub_pull_request_view = "<leader>ghs Sub"


" These do not work
" map <leader>ghc <Action>(GitHub.Copy.Link)
" let g:WhichKeyDesc_git_hub_copy_link = "<leader>ghc Copy Link"
" map <leader>ghb <Action>(Github.Open.In.Browser)
" let g:WhichKeyDesc_git_hub_open_in_browser = "<leader>ghb Open In Browser"
" map <leader>ghc <Action>(Github.PullRequest.Changes.Popup)
" let g:WhichKeyDesc_git_hub_pull_request_changes_popup = "<leader>ghc Changes"
" map <leader>ght <Action>(Github.PullRequest.Changes.Toolbar)
" let g:WhichKeyDesc_git_hub_pull_request_changes_toolbar = "<leader>ght Toolbar"
" map <leader>ghl <Action>(Github.PullRequest.Copy.Link)
" let g:WhichKeyDesc_git_hub_pull_request_copy_link = "<leader>ghl Copy Link"
" map <leader>ghd <Action>(Github.PullRequest.Details.Popup)
" let g:WhichKeyDesc_git_hub_pull_request_details = "<leader>ghd PullRequest Request Details"
" map <leader>ghP <Action>(Github.PullRequest.ToolWindow.List.Popup)
" let g:WhichKeyDesc_git_hub_pull_popup = "<leader>ghP Popup"
" map <leader>ghv <Action>(Github.PullRequest.Details.Commit.Tree.ViewOptions)
" map <leader>ghs <Action>(Github.PullRequest.Show)

""" Language
let g:WhichKeyDesc_language = "<leader>l Language"
map <leader>lm <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_language_menu = "<leader>lm Menu"
map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
map <leader>lc <Action>(ChangeSignature)
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
map <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"
map <leader>li <Action>(Inline)
let g:WhichKeyDesc_language_inline = "<leader>li Inline"
map <leader>lf <Action>(ReformatCode)<Action>(SilentCodeCleanup)
let g:WhichKeyDesc_language_reformat = "<leader>lf Format"

""" Overview
map <leader>o <Action>(FileStructurePopup)
let g:WhichKeyDesc_file_structure = "<leader>o Structure"

"""" Menu
map <leader>mm <Action>(ShowPopupMenu)
map <C-m> <Action>(ShowPopupMenu)

""" Navigation
let g:WhichKeyDesc_navigation = "<leader>n Navigation"
map <leader>ne <Action>(GotoNextError)
let g:WhichKeyDesc_navigation_next_error = "<leader>ne Next Error"
map <leader>no <Action>(NextOccurence)
let g:WhichKeyDesc_navigation_next_occurence = "<leader>no Next Occurrence"
map <leader>ns <Action>(NewScratchFile)
let g:WhichKeyDesc_navigation_new_scratch_file = "<leader>ns New Scratch File"
map <leader>nf <Action>(ShowNavBar)
let g:WhichKeyDesc_navigation_files = "<leader>nf Navigate files"
map <leader>nt <Action>(GotoTest)
let g:WhichKeyDesc_navigation_test = "<leader>nt Navigate to Test"

""" PHP Related
let g:WhichKeyDesc_php = "<leader>p PHP"
map <leader>pt <Action>(nl.deschepers.laraveltinker.action.SmartAction)
let g:WhichKeyDesc_php_tinker_smart_action = "<leader>pt Laravel Tinker"
map <leader>ph <Action>(com.laravel_idea.plugin.GenerateHelperCodeAction)
let g:WhichKeyDesc_php_laravel_idea_code_helper = "<leader>ph Laravel Idea Code Helper"

""" Run
let g:WhichKeyDesc_run = "<leader>r Run"
map <leader>rn <Action>(RunClass)
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
map <leader>rc <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run_choose_configuration = "<leader>rc Run Configuration"
map <leader>rC <Action>(CreateRunConfiguration)
let g:WhichKeyDesc_create_run_configuration = "<leader>rC Create Run Configuration"
map <leader>rs <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
map <leader>rr <Action>(Rerun)
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
map <leader>rd <Action>(DebugClass)
let g:WhichKeyDesc_run_debug = "<leader>rd Debug Nearest"
map <leader>rh <Action>(ImportTests)
let g:WhichKeyDesc_run_import_tests = "<leader>rh Test History"
map <leader>rm <Action>(RunMenu)
let g:WhichKeyDesc_run_menu = "<leader>rm Menu"
map <leader>rf <Action>(RerunFailedTests)
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed"
map <leader>rt <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_run_tool = "<leader>rf Tool"
map <leader>ra <Action>(RunAnything)
let g:WhichKeyDesc_run_tool = "<leader>ra Run Anything..."

""" Tool Windows
let g:WhichKeyDesc_tools = "<leader>t Tools"
map <leader>tm <Action>(ToolWindowsGroup)
let g:WhichKeyDesc_tools_menu = "<leader>tm Menu"
map <leader>tb <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_tools_bookmarks = "<leader>tb Bookmark Tool"
map <leader>tr <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_tools_run = "<leader>tr Run"
map <leader>tf <Action>(ActivateFindToolWindow)
let g:WhichKeyDesc_tools_find = "<leader>tf Find"
map <leader>tc <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_tools_commit = "<leader>tc Commit"
map <leader>td <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_tools_debug = "<leader>td Debug"
map <leader>tg <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_tools_git = "<leader>tg Git"
map <leader>tp <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_tools_problems = "<leader>tp Problems"
map <leader>tT <Action>(ActivateTODOToolWindow)
let g:WhichKeyDesc_tools_todos = "<leader>tT Todo's"
map <leader>tt <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_tools_terminal = "<leader>tt Terminal"
map <leader>tj <Action>(JsonPathEvaluateAction)
let g:WhichKeyDesc_tools_json_path = "<leader>tj Json Path Eval"

""" Search
let g:WhichKeyDesc_search = "<leader>s Search"
map <leader>se <Action>(SearchEverywhere)
let g:WhichKeyDesc_search_everywhere = "<leader>se Everywhere"
map <leader>sr <Action>(RecentFiles)
let g:WhichKeyDesc_search_recent_files = "<leader>sr Recent Files"
map <leader>sc <Action>(GotoClass)
let g:WhichKeyDesc_search_class = "<leader>sc Class"
map <leader>sf <Action>(GotoFile)
let g:WhichKeyDesc_search_files = "<leader>sf Files"
map <leader>ss <Action>(GotoSymbol)
let g:WhichKeyDesc_search_symbols = "<leader>ss Symbols"
map <leader>sa <Action>(GotoAction)
let g:WhichKeyDesc_search_action = "<leader>sa Action"
map <leader>st <Action>(FindInPath)
let g:WhichKeyDesc_search_in_path = "<leader>st In Path"
map <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_search_usages = "<leader>suUsages"
map <leader>sp <Action>(RecentProjectListGroup)
let g:WhichKeyDesc_search_projects = "<leader>sp Usages"
map <leader>sR <Action>(ReplaceInPath)
let g:WhichKeyDesc_search_replace = "<leader>sR Replace"
map <leader>f <Action>(SearchEverywhere)
let g:WhichKeyDesc_fast_search = "<leader>f Search Everywhere"

""" View
let g:WhichKeyDesc_view = "<leader>v View"
map <leader>vl <Action>(SplitVertically)
let g:WhichKeyDesc_view_split_vertically = "<leader>vl Split Vertically"
map <leader>vj <Action>(SplitHorizontally)
let g:WhichKeyDesc_view_split_down = "<leader>vj Split Down"
map <leader>vx <Action>(Unsplit)
let g:WhichKeyDesc_view_unsplit = "<leader>vx Unsplit"
map <leader>vO <Action>(UnsplitAll)
let g:WhichKeyDesc_view_unsplit_all = "<leader>vO UnsplitAll"
map <leader>vo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_view_close_all_editors_but_active = "<leader>vo Close All"
map <leader>vm <Action>(ViewMenu)
let g:WhichKeyDesc_view_menu = "<leader>vm Menu"
map <leader>vb <Action>(ViewToolButtons)
let g:WhichKeyDesc_view_buttons = "<leader>vb Tool Buttons"
map <leader>vM <Action>(MaximizeEditorInSplit)
let g:WhichKeyDesc_view_maximize = "<leader>vM Maximize"
map <leader>vp <Action>(TogglePresentationMode) <Action>(TogglePresentationAssistantAction)
let g:WhichKeyDesc_view_presentation_mode = "<leader>vp Toggle Presentation Mode"

""" Niceties
map <leader>' <Action>(JumpToLastWindow)
let g:WhichKeyDesc_jump_to_last = "<leader>' Last Window"
map <leader>; <Action>(HideAllWindows)
let g:WhichKeyDesc_hide_all_windows = "<leader>; Hide All"
map <leader>\ <Action>(ClearAllNotifications)
let g:WhichKeyDesc_clear_all_notifications = "<leader>\\ Clear Notifications"
map <leader>q <Action>(CloseContent)
let g:WhichKeyDesc_close = "<leader>q Close Window"
map <leader>w <Action>(SaveAll)
let g:WhichKeyDesc_save_all = "<leader>w Save All"
map <leader>e <Action>(ActivateProjectToolWindow)

let g:WhichKeyDesc_explorer = "<leader>e Explorer"
map <C-z> <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_distraction_free = "<C-z> Toggle Distraction Free Mode"
map <leader>a <Action>(ShowIntentionActions)
let g:WhichKeyDesc_actions = "<leader>a Show Intentions"
map <leader>E <Action>(EditSource)
let g:WhichKeyDesc_edit_source = "<leader>E Edit Source"

map <leader>h :noh<CR>
let g:WhichKeyDesc_no_highlight = "<leader>h No Highlight"

let g:WhichKeyDesc_leader_leader = "<leader><leader> Layer 2"
map <leader><leader>ds <Action>(Console.Jdbc.ChooseSchema)
let g:WhichKeyDesc_database = "<leader><leader>d Database"
let g:WhichKeyDesc_database_schema = "<leader><leader>ds Choose Schema"

" Composer
let g:WhichKeyDesc_php_composer = "<leader>pc Composer"
map <leader>pci <Action>(ComposerInstallAction)
let g:WhichKeyDesc_php_composer_install = "<leader>pci Composer Install"
map <leader>pcu <Action>(ComposerUpdateAction)
let g:WhichKeyDesc_php_composer_update = "<leader>pcu Composer Update"

"Config
let g:WhichKeyDesc_config = "<leader>, Config"
let g:WhichKeyDesc_config_vim = "<leader>,v Vim"
map <leader>,va <Action>(VimFindActionIdAction)
let g:WhichKeyDesc_config_vim_actions = "<leader>,va Vim Toggle Action Id's"
map <leader>,vv <Action>(VimPluginToggle)
let g:WhichKeyDesc_config_vim_toggle = "<leader>,vv Toggle Vim"
map <leader>,cc <Action>(ChangeColorScheme)
let g:WhichKeyDesc_config_change_color_scheme = "<leader>,cc Change Color Scheme"
map <leader>,p <Action>(TogglePresentationAssistantAction)
let g:WhichKeyDesc_config_toggle_presentation_assistant = "<leader>,p Presentation Assistant"

" close the popup and don't process formerly typed keys
" let g:WhichKey_ProcessUnknownMappings = "false
""" Ideas:
""" prefix+m is always the menu
""" prefix+char is shortcut in the menu

